#lang racket
(provide the-parser)
(provide the-lexer/tokens)

(require parser-tools/yacc
         parser-tools/lex
         (prefix-in : parser-tools/lex-sre))

(define-tokens value-tokens (NUM ID PLUS MINUS MUL DERIVATIVE))
(define-empty-tokens op-tokens (EOF))

(define the-lexer/tokens
  (lexer
   [(eof) 'EOF]
   ["Deriv" (token-DERIVATIVE (string->symbol lexeme))]
   ["+" (token-PLUS (string->symbol lexeme))]
   ["-" (token-MINUS (string->symbol lexeme))]
   ["*" (token-MUL (string->symbol lexeme))]
   [(:+ numeric) (token-NUM (string->number lexeme))]
   [(:: (:or alphabetic #\_)
        (:* (:or alphabetic numeric #\_)))
    (token-ID (string->symbol lexeme))]
   [whitespace (the-lexer/tokens input-port)]))


;;;-------------------------------------
;;; AST
;;;-------------------------------------

(struct diff-module (expressions))

(struct derivative (expression))

(struct addition (e1 e2))

(struct subtraction (e1 e2))

(struct multiplication (e1 e2))

(define the-parser
  (parser
   [start mod]
   [end EOF]
   [error void]
   [tokens value-tokens op-tokens]
   [grammar
    [mod [(derivative-expression) (diff-module $1)]]
    [derivative-expression [(DERIVATIVE expression) (derivative $1)]]
    [expression [(NUM PLUS NUM) (addition $1 $3)]
                [(NUM MINUS NUM) (subtraction $1 $3)]
                [(NUM MUL NUM) (multiplication $1 $3)]]]))
                
