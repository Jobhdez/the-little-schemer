########################
#                      #
# the little schemer   #
#######################

#### this repo contains some learning sessions:

###  haskell, c, x86-64 and racket programs

quick exercises to learn  Haskell, C and Racket programs;

e.g., I wrote a little parser in racket to get my feet wet and learn how to to use the parser generator.

e.g., In Haskell I wrote a little symobolic differentiator and a polymorphic tiny math system among other tiny programs.

e.g., In C I wrote a little basic linear algebra system. you cant return arrays like in python or lisp; you need to use pointers! Cool stuff. I have also done some quick exercises and wrote some notes about how pointers work.
e.g., 3/17: in c im rewrote the basic linear algebra library but this time I used `typedef struct` - grasped the basics of pointers and memory allocation 
by working on this.

Eg. In assembly I've written really tiny stuff; recently I've been writing the corresponding assembly for a few small python programs.
to understand pointers check this stackoverflow answer:

https://stackoverflow.com/questions/33746434/double-pointer-vs-array-of-pointersarray-vs-array
